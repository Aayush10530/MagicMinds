import { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { DavidAvatar } from './DavidAvatar';
import { EmojiReactions } from './EmojiReactions';
import { SmartTips } from './SmartTips';
import { Mic, MicOff, Volume2, RotateCcw } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface VoiceChatProps {
  language: string;
  onSessionComplete: () => void;
}

interface ChatMessage {
  id: string;
  type: 'user' | 'ai';
  text: string;
  timestamp: Date;
  audioUrl?: string;
}

export const VoiceChat = ({ language, onSessionComplete }: VoiceChatProps) => {
  const [isRecording, setIsRecording] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [currentTip, setCurrentTip] = useState("Click the microphone and start speaking! I can hear you perfectly!");

  // Initialize messages based on language
  useEffect(() => {
    const greetings = {
      'en': "Hello there! I'm David, your magical voice tutor! ЁЯСитАНЁЯПл Ask me anything - what would you like to learn today?",
      'hi': "рдирдорд╕реНрддреЗ! рдореИрдВ рдбреЗрд╡рд┐рдб рд╣реВрдВ, рдЖрдкрдХрд╛ рдЬрд╛рджреБрдИ рдЖрд╡рд╛рдЬ рдЯреНрдпреВрдЯрд░! ЁЯСитАНЁЯПл рдореБрдЭрд╕реЗ рдХреБрдЫ рднреА рдкреВрдЫреЗрдВ - рдЖрдк рдЖрдЬ рдХреНрдпрд╛ рд╕реАрдЦрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
      'mr': "рдирдорд╕реНрдХрд╛рд░! рдореА рдбреЗрд╡рд┐рдб рдЖрд╣реЗ, рддреБрдордЪрд╛ рдЬрд╛рджреБрдИ рдЖрд╡рд╛рдЬ рд╢рд┐рдХреНрд╖рдХ! ЁЯСитАНЁЯПл рдорд▓рд╛ рдХрд╛рд╣реАрд╣реА рд╡рд┐рдЪрд╛рд░рд╛ - рддреБрдореНрд╣рд╛рд▓рд╛ рдЖрдЬ рдХрд╛рдп рд╢рд┐рдХрд╛рдпрдЪреЗ рдЖрд╣реЗ?",
      'gu': "ркиркорк╕рлНркдрлЗ! рк╣рлБркВ ркбрлЗрк╡рк┐ркб ркЫрлБркВ, ркдркорк╛рк░рлЛ ркЬрк╛ркжрлБркИ ркЕрк╡рк╛ркЬ рк╢рк┐ркХрлНрк╖ркХ! ЁЯСитАНЁЯПл ркоркирлЗ ркХркВркИрккркг рккрлВркЫрлЛ - ркдркорлЗ ркЖркЬрлЗ рк╢рлБркВ рк╢рлАркЦрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?",
      'ta': "ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЯрпЗро╡ро┐роЯрпН, роЙроЩрпНроХро│рпН роороирпНродро┐ро░ роХрпБро░ро▓рпН роЖроЪро┐ро░ро┐ропро░рпН! ЁЯСитАНЁЯПл роОройрпНройро┐роЯроорпН роОродрпИропрпБроорпН роХрпЗро│рпНро╡ро┐ роХрпЗро│рпБроЩрпНроХро│рпН - роирпАроЩрпНроХро│рпН роЗройрпНро▒рпБ роОройрпНрой роХро▒рпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?"
    };
    
    const tips = {
      'en': "Click the microphone and start speaking! I can hear you perfectly!",
      'hi': "рдорд╛рдЗрдХреНрд░реЛрдлреЛрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ рдФрд░ рдмреЛрд▓рдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ! рдореИрдВ рдЖрдкрдХреЛ рдкреВрд░реА рддрд░рд╣ рд╕реЗ рд╕реБрди рд╕рдХрддрд╛ рд╣реВрдВ!",
      'mr': "рдорд╛рдпрдХреНрд░реЛрдлреЛрдирд╡рд░ рдХреНрд▓рд┐рдХ рдХрд░рд╛ рдЖрдгрд┐ рдмреЛрд▓рдгреЗ рд╕реБрд░реВ рдХрд░рд╛! рдореА рддреБрдореНрд╣рд╛рд▓рд╛ рдкреВрд░реНрдгрдкрдгреЗ рдРрдХреВ рд╢рдХрддреЛ!",
      'gu': "ркорк╛ркЗркХрлНрк░рлЛрклрлЛрки рккрк░ ркХрлНрк▓рк┐ркХ ркХрк░рлЛ ркЕркирлЗ ркмрлЛрк▓рк╡рк╛ркирлБркВ рк╢рк░рлВ ркХрк░рлЛ! рк╣рлБркВ ркдркоркирлЗ рк╕ркВрккрлВрк░рлНркгрккркгрлЗ рк╕рк╛ркВркнрк│рлА рк╢ркХрлБркВ ркЫрлБркВ!",
      'ta': "роорпИроХрпНро░рпЛроГрокрпЛройро┐ро▓рпН роХро┐ро│ро┐роХрпН роЪрпЖропрпНродрпБ рокрпЗроЪродрпН родрпКроЯроЩрпНроХрпБроЩрпНроХро│рпН! роиро╛ройрпН роЙроЩрпНроХро│рпИ роЪро░ро┐ропро╛роХроХрпН роХрпЗроЯрпНроХ роорпБроЯро┐ропрпБроорпН!"
    };

    setMessages([{
      id: '1',
      type: 'ai',
      text: greetings[language as keyof typeof greetings] || greetings['en'],
      timestamp: new Date()
    }]);
    
    setCurrentTip(tips[language as keyof typeof tips] || tips['en']);
  }, [language]);
  
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const audioChunksRef = useRef<Blob[]>([]);
  const { toast } = useToast();

  useEffect(() => {
    // Request microphone permissions on component mount
    requestMicrophonePermission();
  }, []);

  const requestMicrophonePermission = async () => {
    try {
      await navigator.mediaDevices.getUserMedia({ audio: true });
    } catch (error) {
      toast({
        title: "Microphone Access Needed",
        description: "Please allow microphone access to use voice chat!",
        variant: "destructive"
      });
    }
  };

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      audioChunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          audioChunksRef.current.push(event.data);
        }
      };

      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });
        processAudio(audioBlob);
        stream.getTracks().forEach(track => track.stop());
      };

      mediaRecorder.start();
      setIsRecording(true);
      setCurrentTip("Great! I'm listening carefully. Speak clearly and take your time!");

      // Auto-stop after 30 seconds
      setTimeout(() => {
        if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
          stopRecording();
        }
      }, 30000);

    } catch (error) {
      toast({
        title: "Recording Error",
        description: "Couldn't start recording. Please check your microphone!",
        variant: "destructive"
      });
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      setIsProcessing(true);
      setCurrentTip("Processing your voice... This might take a moment! тЬи");
    }
  };

  const processAudio = async (audioBlob: Blob) => {
    try {
      setCurrentTip("Processing your voice... This might take a moment! тЬи");
      
      // Create form data for API request
      const formData = new FormData();
      formData.append('audio', audioBlob, 'recording.wav');
      formData.append('language', language);
      
      // Add conversation history if available (last 5 messages)
      if (messages.length > 0) {
        const history = messages.slice(-5).map(msg => ({
          type: msg.type,
          text: msg.text
        }));
        formData.append('history', JSON.stringify(history));
      }
      
      // Send audio to backend API
      const response = await fetch(`${import.meta.env.VITE_API_URL || 'http://localhost:3000'}/api/voice/chat`, {
        method: 'POST',
        body: formData
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to process audio');
      }
      
      const data = await response.json();
      
      // Add user message
      const userMsgId = Date.now().toString();
      setMessages(prev => [...prev, {
        id: userMsgId,
        type: 'user',
        text: data.userMessage,
        timestamp: new Date()
      }]);

      // Create audio element for AI response
      const audioUrl = `data:audio/mp3;base64,${data.audio}`;
      const audio = new Audio(audioUrl);
      
      // Add AI message with audio
      const aiMsgId = (Date.now() + 1).toString();
      setMessages(prev => [...prev, {
        id: aiMsgId,
        type: 'ai',
        text: data.aiMessage,
        timestamp: new Date(),
        audioUrl
      }]);
      
      // Play audio response
      audio.play();
      
      // Update progress after session
      if (messages.length >= 4) { // After a few exchanges
        onSessionComplete();
      }
      
      setCurrentTip("Great job! Ask another question or try something new!");
      setIsProcessing(false);
    } catch (error) {
      console.error('Error processing audio:', error);
      toast({
        title: "Processing Error",
        description: error instanceof Error ? error.message : "Failed to process your voice",
        variant: "destructive"
      });
      setIsProcessing(false);
      // More thoughtful error messages based on language
      const errorTips = {
        'en': "Hmm, it seems our magical connection is having a hiccup! Did you know that even wizards sometimes need to restart their wands? Let's try again with a clearer voice! ЁЯзЩтАНтЩВя╕ПтЬи",
        'hi': "рд▓рдЧрддрд╛ рд╣реИ рд╣рдорд╛рд░рд╛ рдЬрд╛рджреБрдИ рдХрдиреЗрдХреНрд╢рди рдереЛрдбрд╝рд╛ рд╣рд┐рдЪрдХ рд░рд╣рд╛ рд╣реИ! рдХреНрдпрд╛ рдЖрдк рдЬрд╛рдирддреЗ рд╣реИрдВ рдХрд┐ рдЬрд╛рджреВрдЧрд░реЛрдВ рдХреЛ рднреА рдХрднреА-рдХрднреА рдЕрдкрдиреА рдЫрдбрд╝реА рдХреЛ рд░реАрд╕реНрдЯрд╛рд░реНрдЯ рдХрд░рдирд╛ рдкрдбрд╝рддрд╛ рд╣реИ? рдЖрдЗрдП рдПрдХ рд╕реНрдкрд╖реНрдЯ рдЖрд╡рд╛рдЬ рдХреЗ рд╕рд╛рде рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ! ЁЯзЩтАНтЩВя╕ПтЬи",
        'mr': "рдЕрд╕рдВ рд╡рд╛рдЯрддрдВ рдХреА рдЖрдкрд▓рд╛ рдЬрд╛рджреБрдИ рдХрдиреЗрдХреНрд╢рди рдереЛрдбрд╛ рдЕрдбрдЦрд│рдд рдЖрд╣реЗ! рддреБрдореНрд╣рд╛рд▓рд╛ рдорд╛рд╣рд┐рдд рдЖрд╣реЗ рдХрд╛ рдХреА рдЬрд╛рджреВрдЧрд╛рд░рд╛рдВрдирд╛рд╣реА рдХрдзреАрдХрдзреА рддреНрдпрд╛рдВрдЪреА рдЬрд╛рджреВрдЪреА рдХрд╛рдВрдбреА рд░реАрд╕реНрдЯрд╛рд░реНрдЯ рдХрд░рд╛рд╡реА рд▓рд╛рдЧрддреЗ? рдЪрд▓рд╛, рдЕрдзрд┐рдХ рд╕реНрдкрд╖реНрдЯ рдЖрд╡рд╛рдЬрд╛рдд рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░реВ! ЁЯзЩтАНтЩВя╕ПтЬи",
        'gu': "рк▓рк╛ркЧрлЗ ркЫрлЗ ркХрлЗ ркЖрккркгрлБркВ ркЬрк╛ркжрлБркИ ркЬрлЛркбрк╛ркг ркерлЛркбрлБркВ ркЕркЯркХрлА рк░рк╣рлНркпрлБркВ ркЫрлЗ! рк╢рлБркВ ркдркорлЗ ркЬрк╛ркгрлЛ ркЫрлЛ ркХрлЗ ркЬрк╛ркжрлБркЧрк░рлЛркирлЗ рккркг ркХрлНркпрк╛рк░рлЗркХ ркдрлЗркоркирлА ркЬрк╛ркжрлБркИ ркЫркбрлА рклрк░рлАркерлА рк╢рк░рлВ ркХрк░рк╡рлА рккркбрлЗ ркЫрлЗ? ркЪрк╛рк▓рлЛ рк╡ркзрлБ рк╕рлНрккрк╖рлНркЯ ркЕрк╡рк╛ркЬ рк╕рк╛ркерлЗ рклрк░рлА рккрлНрк░ркпрк╛рк╕ ркХрк░рлАркП! ЁЯзЩтАНтЩВя╕ПтЬи",
        'ta': "роироородрпБ рооро╛ропродрпН родрпКроЯро░рпНрокрпБ роЪро┐ро▒ро┐родрпБ родроЯрпБрооро╛ро▒рпБро╡родрпБ рокрпЛро▓рпН родрпЖро░ро┐роХро┐ро▒родрпБ! роороирпНродро┐ро░ро╡ро╛родро┐роХро│рпБроорпН роЪро┐ро▓ роирпЗро░роЩрпНроХро│ро┐ро▓рпН родроЩрпНроХро│рпН роороирпНродро┐ро░роХрпН роХрпЛро▓рпИ рооро▒рпБродрпКроЯроХрпНроХроорпН роЪрпЖропрпНроп ро╡рпЗрогрпНроЯрпБроорпН роОройрпНрокродрпБ роЙроЩрпНроХро│рпБроХрпНроХрпБродрпН родрпЖро░ро┐ропрпБрооро╛? родрпЖро│ро┐ро╡ро╛рой роХрпБро░ро▓рпБроЯройрпН роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐рокрпНрокрпЛроорпН! ЁЯзЩтАНтЩВя╕ПтЬи"
      };
      setCurrentTip(errorTips[language as keyof typeof errorTips] || errorTips['en']);
    }
  };
  
  // Define AI responses for different languages
  const aiResponses = {
    'en': [
      "A noun is a word that names a person, place, or thing! Like 'cat', 'school', or 'friend'. Can you tell me a noun? ЁЯШК",
      "I'd be happy to help with math! What would you like to learn? Addition, subtraction, or something else? ЁЯФв",
      "Animals are amazing! Did you know dolphins can recognize themselves in mirrors? What's your favorite animal? ЁЯРм",
      "I can't check the weather, but I can help you learn weather words! Sunshine тШАя╕П, rain ЁЯМзя╕П, clouds тШБя╕П. What weather do you like?",
      "Making friends is special! Try being kind, sharing, and asking others to play. Friendship is like a beautiful flower that grows! ЁЯМ╕"
    ],
    'hi': [
      "рд╕рдВрдЬреНрдЮрд╛ рдПрдХ рдРрд╕рд╛ рд╢рдмреНрдж рд╣реИ рдЬреЛ рдХрд┐рд╕реА рд╡реНрдпрдХреНрддрд┐, рд╕реНрдерд╛рди рдпрд╛ рд╡рд╕реНрддреБ рдХрд╛ рдирд╛рдо рдмрддрд╛рддрд╛ рд╣реИ! рдЬреИрд╕реЗ 'рдмрд┐рд▓реНрд▓реА', 'рд╕реНрдХреВрд▓', рдпрд╛ 'рджреЛрд╕реНрдд'ред рдХреНрдпрд╛ рдЖрдк рдореБрдЭреЗ рдПрдХ рд╕рдВрдЬреНрдЮрд╛ рдмрддрд╛ рд╕рдХрддреЗ рд╣реИрдВ? ЁЯШК",
      "рдореБрдЭреЗ рдЧрдгрд┐рдд рдореЗрдВ рдорджрдж рдХрд░рдиреЗ рдореЗрдВ рдЦреБрд╢реА рд╣реЛрдЧреА! рдЖрдк рдХреНрдпрд╛ рд╕реАрдЦрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ? рдЬреЛрдбрд╝, рдШрдЯрд╛рд╡, рдпрд╛ рдХреБрдЫ рдФрд░? ЁЯФв",
      "рдЬрд╛рдирд╡рд░ рдЕрджреНрднреБрдд рд╣реИрдВ! рдХреНрдпрд╛ рдЖрдк рдЬрд╛рдирддреЗ рд╣реИрдВ рдХрд┐ рдбреЙрд▓реНрдлрд┐рди рдЖрдИрдиреЗ рдореЗрдВ рдЦреБрдж рдХреЛ рдкрд╣рдЪрд╛рди рд╕рдХрддреЗ рд╣реИрдВ? рдЖрдкрдХрд╛ рдкрд╕рдВрджреАрджрд╛ рдЬрд╛рдирд╡рд░ рдХреМрди рд╕рд╛ рд╣реИ? ЁЯРм",
      "рдореИрдВ рдореМрд╕рдо рдХреА рдЬрд╛рдВрдЪ рдирд╣реАрдВ рдХрд░ рд╕рдХрддрд╛, рд▓реЗрдХрд┐рди рдореИрдВ рдЖрдкрдХреЛ рдореМрд╕рдо рдХреЗ рд╢рдмреНрдж рд╕рд┐рдЦрд╛рдиреЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ! рдзреВрдк тШАя╕П, рдмрд╛рд░рд┐рд╢ ЁЯМзя╕П, рдмрд╛рджрд▓ тШБя╕Пред рдЖрдкрдХреЛ рдХреМрди рд╕рд╛ рдореМрд╕рдо рдкрд╕рдВрдж рд╣реИ?",
      "рджреЛрд╕реНрдд рдмрдирд╛рдирд╛ рд╡рд┐рд╢реЗрд╖ рд╣реИ! рджрдпрд╛рд▓реБ рдмрдирдиреЗ, рдмрд╛рдВрдЯрдиреЗ рдФрд░ рджреВрд╕рд░реЛрдВ рдХреЛ рдЦреЗрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд╣рдиреЗ рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред рджреЛрд╕реНрддреА рдПрдХ рд╕реБрдВрджрд░ рдлреВрд▓ рдХреА рддрд░рд╣ рд╣реИ рдЬреЛ рдмрдврд╝рддреА рд╣реИ! ЁЯМ╕"
    ],
    'mr': [
      "рдирд╛рдо рд╣рд╛ рдПрдХ рд╢рдмреНрдж рдЖрд╣реЗ рдЬреЛ рдПрдЦрд╛рджреНрдпрд╛ рд╡реНрдпрдХреНрддреА, рдард┐рдХрд╛рдг рдХрд┐рдВрд╡рд╛ рд╡рд╕реНрддреВрдЪреЗ рдирд╛рд╡ рд╕рд╛рдВрдЧрддреЛ! рдЬрд╕реЗ 'рдорд╛рдВрдЬрд░', 'рд╢рд╛рд│рд╛', рдХрд┐рдВрд╡рд╛ 'рдорд┐рддреНрд░'ред рддреБрдореНрд╣реА рдорд▓рд╛ рдПрдХ рдирд╛рдо рд╕рд╛рдВрдЧреВ рд╢рдХрддрд╛ рдХрд╛? ЁЯШК",
      "рдорд▓рд╛ рдЧрдгрд┐рддрд╛рдд рдорджрдд рдХрд░рдгреНрдпрд╛рдд рдЖрдирдВрдж рд╡рд╛рдЯреЗрд▓! рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд╛рдп рд╢рд┐рдХрд╛рдпрдЪреЗ рдЖрд╣реЗ? рдмреЗрд░реАрдЬ, рд╡рдЬрд╛рдмрд╛рдХреА, рдХрд┐рдВрд╡рд╛ рдХрд╛рд╣реАрддрд░реА? ЁЯФв",
      "рдкреНрд░рд╛рдгреА рдЦреВрдк рдЖрд╢реНрдЪрд░реНрдпрдХрд╛рд░рдХ рдЖрд╣реЗрдд! рддреБрдореНрд╣рд╛рд▓рд╛ рдорд╛рд╣рд┐рдд рдЖрд╣реЗ рдХрд╛ рдХреА рдбреЙрд▓реНрдлрд┐рди рдЖрд░рд╢рд╛рдд рд╕реНрд╡рддрдГрд▓рд╛ рдУрд│рдЦреВ рд╢рдХрддрд╛рдд? рддреБрдордЪрд╛ рдЖрд╡рдбрддрд╛ рдкреНрд░рд╛рдгреА рдХреЛрдгрддрд╛ рдЖрд╣реЗ? ЁЯРм",
      "рдореА рд╣рд╡рд╛рдорд╛рди рддрдкрд╛рд╕реВ рд╢рдХрдд рдирд╛рд╣реА, рдкрдг рдореА рддреБрдореНрд╣рд╛рд▓рд╛ рд╣рд╡рд╛рдорд╛рди рд╢рдмреНрдж рд╢рд┐рдХрдгреНрдпрд╛рдд рдорджрдд рдХрд░реВ рд╢рдХрддреЛ! рд╕реВрд░реНрдпрдкреНрд░рдХрд╛рд╢ тШАя╕П, рдкрд╛рдКрд╕ ЁЯМзя╕П, рдврдЧ тШБя╕Пред рддреБрдореНрд╣рд╛рд▓рд╛ рдХреЛрдгрддреЗ рд╣рд╡рд╛рдорд╛рди рдЖрд╡рдбрддреЗ?",
      "рдорд┐рддреНрд░ рдмрдирд╡рдгреЗ рдЦрд╛рд╕ рдЖрд╣реЗ! рджрдпрд╛рд│реВ рдЕрд╕рдгреЗ, рд╡рд╛рдЯрдгреЗ рдЖрдгрд┐ рдЗрддрд░рд╛рдВрдирд╛ рдЦреЗрд│рдгреНрдпрд╛рд╕ рд╕рд╛рдВрдЧрдгреНрдпрд╛рдЪрд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛ред рдореИрддреНрд░реА рдПрдХ рд╕реБрдВрджрд░ рдлреВрд▓рд╛рд╕рд╛рд░рдЦреА рдЖрд╣реЗ рдЬреА рд╡рд╛рдврддреЗ! ЁЯМ╕"
    ],
    'gu': [
      "рк╕ркВркЬрлНркЮрк╛ ркП ркПрк╡рлЛ рк╢ркмрлНркж ркЫрлЗ ркЬрлЗ ркХрлЛркИ рк╡рлНркпркХрлНркдрк┐, рк╕рлНркерк╛рки ркЕркерк╡рк╛ рк╡рк╕рлНркдрлБркирлБркВ ркирк╛рко ркмркдрк╛рк╡рлЗ ркЫрлЗ! ркЬрлЗрко ркХрлЗ 'ркмрк┐рк▓рк╛ркбрлА', 'рк╢рк╛рк│рк╛', ркЕркерк╡рк╛ 'ркорк┐ркдрлНрк░'ред рк╢рлБркВ ркдркорлЗ ркоркирлЗ ркПркХ рк╕ркВркЬрлНркЮрк╛ ркХрк╣рлА рк╢ркХрлЛ ркЫрлЛ? ЁЯШК",
      "ркоркирлЗ ркЧркгрк┐ркдркорк╛ркВ ркоркжркж ркХрк░рк╡рк╛ркорк╛ркВ ркЖркиркВркж ркерк╢рлЗ! ркдркорлЗ рк╢рлБркВ рк╢рлАркЦрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ? рк╕рк░рк╡рк╛рк│рлЛ, ркмрк╛ркжркмрк╛ркХрлА, ркЕркерк╡рк╛ ркХркВркИркХ ркмрлАркЬрлБркВ? ЁЯФв",
      "рккрлНрк░рк╛ркгрлАркУ ркЦрлВркм ркЬ ркЕркжрлНркнрлБркд ркЫрлЗ! рк╢рлБркВ ркдркорлЗ ркЬрк╛ркгрлЛ ркЫрлЛ ркХрлЗ ркбрлЛрк▓рлНрклрк┐рки ркЕрк░рлАрк╕рк╛ркорк╛ркВ рккрлЛркдрк╛ркирлЗ ркУрк│ркЦрлА рк╢ркХрлЗ ркЫрлЗ? ркдркорк╛рк░рлЛ рккрлНрк░рк┐ркп рккрлНрк░рк╛ркгрлА ркХрлЛркг ркЫрлЗ? ЁЯРм",
      "рк╣рлБркВ рк╣рк╡рк╛ркорк╛рки ркдрккрк╛рк╕рлА рк╢ркХркдрлЛ ркиркерлА, рккркг рк╣рлБркВ ркдркоркирлЗ рк╣рк╡рк╛ркорк╛ркиркирк╛ рк╢ркмрлНркжрлЛ рк╢рлАркЦрк╡рк╛ркорк╛ркВ ркоркжркж ркХрк░рлА рк╢ркХрлБркВ ркЫрлБркВ! рк╕рлВрк░рлНркпрккрлНрк░ркХрк╛рк╢ тШАя╕П, рк╡рк░рк╕рк╛ркж ЁЯМзя╕П, рк╡рк╛ркжрк│ тШБя╕Пред ркдркоркирлЗ ркХркпрлБркВ рк╣рк╡рк╛ркорк╛рки ркЧркорлЗ ркЫрлЗ?",
      "ркорк┐ркдрлНрк░ ркмркирк╛рк╡рк╡рлБркВ ркЦрк╛рк╕ ркЫрлЗ! ркжркпрк╛рк│рлБ ркмркирк╡рк╛ркирлЛ, рк╡рк╣рлЗркВркЪрк╡рк╛ркирлЛ ркЕркирлЗ ркмрлАркЬрк╛ркирлЗ рк░ркорк╡рк╛ ркХрк╣рлЗрк╡рк╛ркирлЛ рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛред ркорк┐ркдрлНрк░ркдрк╛ ркПркХ рк╕рлБркВркжрк░ рклрлВрк▓ ркЬрлЗрк╡рлА ркЫрлЗ ркЬрлЗ рк╡ркзрлЗ ркЫрлЗ! ЁЯМ╕"
    ],
    'ta': [
      "рокрпЖропро░рпНроЪрпНроЪрпКро▓рпН роОройрпНрокродрпБ роТро░рпБ роирокро░рпН, роЗроЯроорпН роЕро▓рпНро▓родрпБ рокрпКро░рпБро│ро┐ройрпН рокрпЖропро░рпИроХрпН роХрпБро▒ро┐роХрпНроХрпБроорпН роЪрпКро▓рпН! 'рокрпВройрпИ', 'рокро│рпНро│ро┐', роЕро▓рпНро▓родрпБ 'роирогрпНрокро░рпН' рокрпЛройрпНро▒ро╡рпИ. роирпАроЩрпНроХро│рпН роОройроХрпНроХрпБ роТро░рпБ рокрпЖропро░рпНроЪрпНроЪрпКро▓рпН роЪрпКро▓рпНро▓ роорпБроЯро┐ропрпБрооро╛? ЁЯШК",
      "роиро╛ройрпН роХрогро┐родродрпНродро┐ро▓рпН роЙродро╡ роороХро┐ро┤рпНроЪрпНроЪро┐ роЕроЯрпИро╡рпЗройрпН! роирпАроЩрпНроХро│рпН роОройрпНрой роХро▒рпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН? роХрпВроЯрпНроЯро▓рпН, роХро┤ро┐родрпНродро▓рпН, роЕро▓рпНро▓родрпБ ро╡рпЗро▒рпБ роПродро╛ро╡родрпБ? ЁЯФв",
      "ро╡ро┐ро▓роЩрпНроХрпБроХро│рпН рооро┐роХро╡рпБроорпН роЕро▒рпНрокрпБродрооро╛ройро╡рпИ! роЯро╛ро▓рпНрокро┐ройрпНроХро│рпН роХрогрпНрогро╛роЯро┐ропро┐ро▓рпН родроЩрпНроХро│рпИ роЕроЯрпИропро╛ро│роорпН роХрогрпНроЯрпБроХрпКро│рпНро│ роорпБроЯро┐ропрпБроорпН роОройрпНро▒рпБ роЙроЩрпНроХро│рпБроХрпНроХрпБродрпН родрпЖро░ро┐ропрпБрооро╛? роЙроЩрпНроХро│рпБроХрпНроХрпБ рокро┐роЯро┐родрпНрод ро╡ро┐ро▓роЩрпНроХрпБ роОродрпБ? ЁЯРм",
      "роиро╛ройрпН ро╡ро╛ройро┐ро▓рпИропрпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХ роорпБроЯро┐ропро╛родрпБ, роЖройро╛ро▓рпН роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ ро╡ро╛ройро┐ро▓рпИ ро╡ро╛ро░рпНродрпНродрпИроХро│рпИ роХро▒рпНроХ роЙродро╡ роорпБроЯро┐ропрпБроорпН! ро╡рпЖропро┐ро▓рпН тШАя╕П, рооро┤рпИ ЁЯМзя╕П, роорпЗроХроорпН тШБя╕П. роЙроЩрпНроХро│рпБроХрпНроХрпБ роОроирпНрод ро╡ро╛ройро┐ро▓рпИ рокро┐роЯро┐роХрпНроХрпБроорпН?",
      "роирогрпНрокро░рпНроХро│рпИ роЙро░рпБро╡ро╛роХрпНроХрпБро╡родрпБ роЪро┐ро▒рокрпНрокрпБ! роХро░рпБрогрпИропрпБроЯройрпН роЗро░рпБроХрпНроХ, рокроХро┐ро░рпНроирпНродрпБ роХрпКро│рпНро│, рооро▒рпНро▒ро╡ро░рпНроХро│рпИ ро╡ро┐ро│рпИропро╛роЯрпБроорпНрокроЯро┐ роХрпЗроЯрпНроХ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН. роироЯрпНрокрпБ роОройрпНрокродрпБ ро╡ро│ро░рпБроорпН роЕро┤роХро╛рой рооро▓ро░рпН рокрпЛройрпНро▒родрпБ! ЁЯМ╕"
    ]
  };
  
  const handleFallbackResponse = () => {
    try {
      const responses = aiResponses[language as keyof typeof aiResponses] || aiResponses['en'];
      const aiResponse = responses[Math.floor(Math.random() * responses.length)];
      
      setMessages(prev => [...prev, {
        id: Date.now().toString(),
        type: 'ai',
        text: aiResponse,
        timestamp: new Date()
      }]);
        
      // Multi-language tips
      const tips = {
        'en': "Fantastic! Try asking another question or tell me what you think!",
        'hi': "рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! рдХреЛрдИ рдФрд░ рд╕рд╡рд╛рд▓ рдкреВрдЫрдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ рдпрд╛ рдореБрдЭреЗ рдмрддрд╛рдПрдВ рдХрд┐ рдЖрдк рдХреНрдпрд╛ рд╕реЛрдЪрддреЗ рд╣реИрдВ!",
        'mr': "рдЦреВрдк рдЫрд╛рди! рджреБрд╕рд░рд╛ рдкреНрд░рд╢реНрди рд╡рд┐рдЪрд╛рд░рдгреНрдпрд╛рдЪрд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛ рдХрд┐рдВрд╡рд╛ рдорд▓рд╛ рд╕рд╛рдВрдЧрд╛ рдХреА рддреБрдореНрд╣реА рдХрд╛рдп рд╡рд┐рдЪрд╛рд░ рдХрд░рддрд╛!",
        'gu': "ркЦрлВркм ркЬ рк╕рк░рк╕! ркмрлАркЬрлЛ рккрлНрк░рк╢рлНрки рккрлВркЫрк╡рк╛ркирлЛ рккрлНрк░ркпрк╛рк╕ ркХрк░рлЛ ркЕркерк╡рк╛ ркоркирлЗ ркХрк╣рлЛ ркХрлЗ ркдркорлЗ рк╢рлБркВ рк╡рк┐ркЪрк╛рк░рлЛ ркЫрлЛ!",
        'ta': "рооро┐роХро╡рпБроорпН роиройрпНро▒рпБ! рооро▒рпНро▒рпКро░рпБ роХрпЗро│рпНро╡ро┐ропрпИроХрпН роХрпЗроЯрпНроХ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ роирпАроЩрпНроХро│рпН роОройрпНрой роиро┐ройрпИроХрпНроХро┐ро▒рпАро░рпНроХро│рпН роОройрпНро▒рпБ роЪрпКро▓рпНро▓рпБроЩрпНроХро│рпН!"
      };
      
      setCurrentTip(tips[language as keyof typeof tips] || tips['en']);
      onSessionComplete();
    } catch (error) {
      toast({
        title: "Processing Error",
        description: "Our magical connection needs a moment to recharge!",
        variant: "destructive"
      });
      // More thoughtful error messages based on language
      const errorTips = {
        'en': "Our magical connection is taking a short nap! Did you know that even the most powerful spells sometimes need a second try? Let's awaken the magic again! ЁЯФотЬи",
        'hi': "рд╣рдорд╛рд░рд╛ рдЬрд╛рджреБрдИ рдХрдиреЗрдХреНрд╢рди рдереЛрдбрд╝реА рджреЗрд░ рдХреЗ рд▓рд┐рдП рдЖрд░рд╛рдо рдХрд░ рд░рд╣рд╛ рд╣реИ! рдХреНрдпрд╛ рдЖрдк рдЬрд╛рдирддреЗ рд╣реИрдВ рдХрд┐ рд╕рдмрд╕реЗ рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рдЬрд╛рджреВ рдХреЛ рднреА рдХрднреА-рдХрднреА рджреВрд╕рд░реЗ рдкреНрд░рдпрд╛рд╕ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛрддреА рд╣реИ? рдЪрд▓рд┐рдП рдлрд┐рд░ рд╕реЗ рдЬрд╛рджреВ рдХреЛ рдЬрдЧрд╛рддреЗ рд╣реИрдВ! ЁЯФотЬи",
        'mr': "рдЖрдкрд▓рд╛ рдЬрд╛рджреБрдИ рдХрдиреЗрдХреНрд╢рди рдереЛрдбрд╛ рдЖрд░рд╛рдо рдХрд░рдд рдЖрд╣реЗ! рддреБрдореНрд╣рд╛рд▓рд╛ рдорд╛рд╣рд┐рдд рдЖрд╣реЗ рдХрд╛ рдХреА рд╕рд░реНрд╡рд╛рдд рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рдЬрд╛рджреВрд▓рд╛рд╣реА рдХрдзреАрдХрдзреА рджреБрд╕рд▒реНрдпрд╛ рдкреНрд░рдпрддреНрдирд╛рдЪреА рдЧрд░рдЬ рдЕрд╕рддреЗ? рдЪрд▓рд╛ рдкреБрдиреНрд╣рд╛ рдЬрд╛рджреВ рдЬрд╛рдЧреГрдд рдХрд░реВрдпрд╛! ЁЯФотЬи",
        'gu': "ркЖрккркгрлБркВ ркЬрк╛ркжрлБркИ ркЬрлЛркбрк╛ркг ркерлЛркбрлА ркЖрк░рк╛рко ркХрк░рлА рк░рк╣рлНркпрлБркВ ркЫрлЗ! рк╢рлБркВ ркдркорлЗ ркЬрк╛ркгрлЛ ркЫрлЛ ркХрлЗ рк╕рлМркерлА рк╢ркХрлНркдрк┐рк╢рк╛рк│рлА ркЬрк╛ркжрлБркирлЗ рккркг ркХрлНркпрк╛рк░рлЗркХ ркмрлАркЬрк╛ рккрлНрк░ркпрк╛рк╕ркирлА ркЬрк░рлВрк░ рккркбрлЗ ркЫрлЗ? ркЪрк╛рк▓рлЛ рклрк░рлАркерлА ркЬрк╛ркжрлБркирлЗ ркЬркЧрк╛ркбрлАркП! ЁЯФотЬи",
        'ta': "роироородрпБ рооро╛роп роЗрогрпИрокрпНрокрпБ роЪро┐ро▒ро┐родрпБ роУропрпНро╡рпЖроЯрпБроХрпНроХро┐ро▒родрпБ! рооро┐роХро╡рпБроорпН роЪроХрпНродро┐ро╡ро╛ропрпНроирпНрод роороирпНродро┐ро░роЩрпНроХро│рпБроХрпНроХрпБроорпН роХрпВроЯ роЪро┐ро▓ роирпЗро░роЩрпНроХро│ро┐ро▓рпН роЗро░рогрпНроЯро╛ро╡родрпБ роорпБропро▒рпНроЪро┐ родрпЗро╡рпИрокрпНрокроЯрпБроорпН роОройрпНрокродрпБ роЙроЩрпНроХро│рпБроХрпНроХрпБродрпН родрпЖро░ро┐ропрпБрооро╛? роорпАрогрпНроЯрпБроорпН роороирпНродро┐ро░родрпНродрпИ ро╡ро┐ро┤ро┐роХрпНроХроЪрпН роЪрпЖропрпНро╡рпЛроорпН! ЁЯФотЬи"
      };
      setCurrentTip(errorTips[language as keyof typeof errorTips] || errorTips['en']);
    } finally {
      setIsProcessing(false);
    }
  };

  const playAIResponse = (text: string) => {
    // Enhanced TTS with language support
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.rate = 0.8;
      utterance.pitch = 1.1;
      
      // Try to set language based on selected language
      const languageMap = {
        'en': 'en-US',
        'hi': 'hi-IN',
        'mr': 'mr-IN', 
        'gu': 'gu-IN',
        'ta': 'ta-IN'
      };
      
      utterance.lang = languageMap[language as keyof typeof languageMap] || 'en-US';
      
      // Add visual feedback
      setCurrentTip(`ЁЯФК Speaking in ${language === 'en' ? 'English' : language === 'hi' ? 'Hindi' : language === 'mr' ? 'Marathi' : language === 'gu' ? 'Gujarati' : 'Tamil'}!`);
      
      window.speechSynthesis.speak(utterance);
    }
  };

  const clearChat = () => {
    const greetings = {
      'en': "Hello there! I'm David, your magical voice tutor! ЁЯСитАНЁЯПл Ask me anything - what would you like to learn today?",
      'hi': "рдирдорд╕реНрддреЗ! рдореИрдВ рдбреЗрд╡рд┐рдб рд╣реВрдВ, рдЖрдкрдХрд╛ рдЬрд╛рджреБрдИ рдЖрд╡рд╛рдЬ рдЯреНрдпреВрдЯрд░! ЁЯСитАНЁЯПл рдореБрдЭрд╕реЗ рдХреБрдЫ рднреА рдкреВрдЫреЗрдВ - рдЖрдк рдЖрдЬ рдХреНрдпрд╛ рд╕реАрдЦрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
      'mr': "рдирдорд╕реНрдХрд╛рд░! рдореА рдбреЗрд╡рд┐рдб рдЖрд╣реЗ, рддреБрдордЪрд╛ рдЬрд╛рджреБрдИ рдЖрд╡рд╛рдЬ рд╢рд┐рдХреНрд╖рдХ! ЁЯСитАНЁЯПл рдорд▓рд╛ рдХрд╛рд╣реАрд╣реА рд╡рд┐рдЪрд╛рд░рд╛ - рддреБрдореНрд╣рд╛рд▓рд╛ рдЖрдЬ рдХрд╛рдп рд╢рд┐рдХрд╛рдпрдЪреЗ рдЖрд╣реЗ?",
      'gu': "ркиркорк╕рлНркдрлЗ! рк╣рлБркВ ркбрлЗрк╡рк┐ркб ркЫрлБркВ, ркдркорк╛рк░рлЛ ркЬрк╛ркжрлБркИ ркЕрк╡рк╛ркЬ рк╢рк┐ркХрлНрк╖ркХ! ЁЯСитАНЁЯПл ркоркирлЗ ркХркВркИрккркг рккрлВркЫрлЛ - ркдркорлЗ ркЖркЬрлЗ рк╢рлБркВ рк╢рлАркЦрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?",
      'ta': "ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЯрпЗро╡ро┐роЯрпН, роЙроЩрпНроХро│рпН роороирпНродро┐ро░ роХрпБро░ро▓рпН роЖроЪро┐ро░ро┐ропро░рпН! ЁЯСитАНЁЯПл роОройрпНройро┐роЯроорпН роОродрпИропрпБроорпН роХрпЗро│рпНро╡ро┐ роХрпЗро│рпБроЩрпНроХро│рпН - роирпАроЩрпНроХро│рпН роЗройрпНро▒рпБ роОройрпНрой роХро▒рпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?"
    };
    
    const tips = {
      'en': "Ready for a fresh start! What would you like to learn?",
      'hi': "рдПрдХ рдирдИ рд╢реБрд░реБрдЖрдд рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░! рдЖрдк рдХреНрдпрд╛ рд╕реАрдЦрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
      'mr': "рдирд╡реАрди рд╕реБрд░реБрд╡рд╛рддреАрд╕рд╛рдареА рддрдпрд╛рд░! рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд╛рдп рд╢рд┐рдХрд╛рдпрдЪреЗ рдЖрд╣реЗ?",
      'gu': "ркирк╡рлА рк╢рк░рлВркЖркд ркорк╛ркЯрлЗ ркдрлИркпрк╛рк░! ркдркорлЗ рк╢рлБркВ рк╢рлАркЦрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?",
      'ta': "рокрпБродро┐роп родрпКроЯроХрпНроХродрпНродро┐ро▒рпНроХрпБ родропро╛ро░ро╛роХ! роирпАроЩрпНроХро│рпН роОройрпНрой роХро▒рпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН?"
    };

    setMessages([{
      id: '1',
      type: 'ai',
      text: greetings[language as keyof typeof greetings] || greetings['en'],
      timestamp: new Date()
    }]);
    setCurrentTip(tips[language as keyof typeof tips] || tips['en']);
  };

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Chat Header */}
      <Card className="p-6 bg-gradient-to-r from-purple-500 to-pink-500 text-white border-0">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <DavidAvatar 
              size="medium" 
              isActive={true} 
              mood={isRecording ? 'listening' : isProcessing ? 'thinking' : 'happy'} 
            />
            <div>
              <h3 className="text-2xl font-bold">
                {language === 'en' ? 'Chat with David!' :
                 language === 'hi' ? 'рдбреЗрд╡рд┐рдб рдХреЗ рд╕рд╛рде рдЪреИрдЯ рдХрд░реЗрдВ!' :
                 language === 'mr' ? 'рдбреЗрд╡рд┐рдбрд╕реЛрдмрдд рдЪреЕрдЯ рдХрд░рд╛!' :
                 language === 'gu' ? 'ркбрлЗрк╡рк┐ркб рк╕рк╛ркерлЗ ркЪрлЗркЯ ркХрк░рлЛ!' :
                 'роЯрпЗро╡ро┐роЯрпН роЙроЯройрпН роЕро░роЯрпНроЯрпИропроЯро┐роХрпНроХро╡рпБроорпН!'}
              </h3>
              <p className="text-purple-100">
                {isRecording ? 
                  (language === 'en' ? "I'm listening..." :
                   language === 'hi' ? "рдореИрдВ рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ..." :
                   language === 'mr' ? "рдореА рдРрдХрдд рдЖрд╣реЗ..." :
                   language === 'gu' ? "рк╣рлБркВ рк╕рк╛ркВркнрк│рлА рк░рк╣рлНркпрлЛ ркЫрлБркВ..." :
                   "роиро╛ройрпН роХрпЗроЯрпНроХро┐ро▒рпЗройрпН...") :
                 isProcessing ? 
                  (language === 'en' ? "Thinking..." :
                   language === 'hi' ? "рд╕реЛрдЪ рд░рд╣рд╛ рд╣реВрдВ..." :
                   language === 'mr' ? "рд╡рд┐рдЪрд╛рд░ рдХрд░рдд рдЖрд╣реЗ..." :
                   language === 'gu' ? "рк╡рк┐ркЪрк╛рк░рлА рк░рк╣рлНркпрлЛ ркЫрлБркВ..." :
                   "роЪро┐роирпНродро┐роХрпНроХро┐ро▒рпЗройрпН...") :
                  (language === 'en' ? "Ready to chat!" :
                   language === 'hi' ? "рдЪреИрдЯ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░!" :
                   language === 'mr' ? "рдЪреЕрдЯрд╕рд╛рдареА рддрдпрд╛рд░!" :
                   language === 'gu' ? "ркЪрлЗркЯ ркорк╛ркЯрлЗ ркдрлИркпрк╛рк░!" :
                   "роЕро░роЯрпНроЯрпИроХрпНроХрпБ родропро╛ро░ро╛роХ!")}
              </p>
            </div>
          </div>
          <Button
            variant="outline"
            size="sm"
            onClick={clearChat}
            className="bg-white/20 border-white/30 text-white hover:bg-white/30"
          >
            <RotateCcw className="w-4 h-4 mr-2" />
            {language === 'en' ? 'New Chat' :
             language === 'hi' ? 'рдирдИ рдЪреИрдЯ' :
             language === 'mr' ? 'рдирд╡реАрди рдЪреЕрдЯ' :
             language === 'gu' ? 'ркирк╡рлА ркЪрлЗркЯ' :
             'рокрпБродро┐роп роЕро░роЯрпНроЯрпИ'}
          </Button>
        </div>
      </Card>

      {/* Chat Messages */}
      <Card className="p-6 bg-white/90 backdrop-blur border-purple-200 min-h-[400px]">
        <div className="space-y-4 max-h-96 overflow-y-auto">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex gap-4 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              {message.type === 'ai' && (
                <DavidAvatar size="small" isActive={true} />
              )}
              
              <div className={`chat-bubble ${
                message.type === 'user' ? 'chat-bubble-user' : 'chat-bubble-ai'
              }`}>
                <p className="text-lg leading-relaxed">{message.text}</p>
                {message.type === 'ai' && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => playAIResponse(message.text)}
                    className="mt-2 text-xs opacity-70 hover:opacity-100"
                  >
                    <Volume2 className="w-3 h-3 mr-1" />
                    {language === 'en' ? 'Play Voice' :
                     language === 'hi' ? 'рдЖрд╡рд╛рдЬ рд╕реБрдиреЗрдВ' :
                     language === 'mr' ? 'рдЖрд╡рд╛рдЬ рдРрдХрд╛' :
                     language === 'gu' ? 'ркЖрк╡рк╛ркЬ рк╕рк╛ркВркнрк│рлЛ' :
                     'роХрпБро░ро▓рпИ роЗропроХрпНроХро╡рпБроорпН'}
                  </Button>
                )}
              </div>
              
              {message.type === 'user' && (
                <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-400 to-green-400 flex items-center justify-center text-white font-bold">
                  ЁЯСд
                </div>
              )}
            </div>
          ))}
        </div>
      </Card>

      {/* Voice Controls */}
      <Card className="p-8 bg-gradient-to-r from-blue-500 to-purple-500 text-white border-0">
        <div className="text-center space-y-6">
          <Button
            onClick={isRecording ? stopRecording : startRecording}
            disabled={isProcessing}
            className={`w-24 h-24 rounded-full text-white border-4 border-white transition-all duration-300 ${
              isRecording 
                ? 'bg-red-500 hover:bg-red-600 animate-pulse-glow' 
                : 'bg-green-500 hover:bg-green-600 hover:scale-110'
            }`}
          >
            {isRecording ? (
              <MicOff className="w-12 h-12" />
            ) : (
              <Mic className="w-12 h-12" />
            )}
          </Button>
          
          <div className="space-y-2">
            <p className="text-xl font-bold">
              {isRecording ? 
                (language === 'en' ? 'ЁЯОд Recording...' :
                 language === 'hi' ? 'ЁЯОд рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ...' :
                 language === 'mr' ? 'ЁЯОд рд░реЗрдХреЙрд░реНрдбрд┐рдВрдЧ...' :
                 language === 'gu' ? 'ЁЯОд рк░рлЗркХрлЛрк░рлНркбрк┐ркВркЧ...' :
                 'ЁЯОд рокродро┐ро╡рпБ роЪрпЖропрпНроХро┐ро▒родрпБ...') :
               isProcessing ? 
                (language === 'en' ? 'тЪб Processing...' :
                 language === 'hi' ? 'тЪб рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ...' :
                 language === 'mr' ? 'тЪб рдкреНрд░рдХреНрд░рд┐рдпрд╛...' :
                 language === 'gu' ? 'тЪб рккрлНрк░ркХрлНрк░рк┐ркпрк╛...' :
                 'тЪб роЪрпЖропро▓ро╛роХрпНроХрпБроХро┐ро▒родрпБ...') :
                (language === 'en' ? 'ЁЯОЩя╕П Tap to Speak' :
                 language === 'hi' ? 'ЁЯОЩя╕П рдмреЛрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рдЯреИрдк рдХрд░реЗрдВ' :
                 language === 'mr' ? 'ЁЯОЩя╕П рдмреЛрд▓рдгреНрдпрд╛рд╕рд╛рдареА рдЯреЕрдк рдХрд░рд╛' :
                 language === 'gu' ? 'ЁЯОЩя╕П ркмрлЛрк▓рк╡рк╛ ркорк╛ркЯрлЗ ркЯрлЗркк ркХрк░рлЛ' :
                 'ЁЯОЩя╕П рокрпЗроЪ роЯрпЗрокрпН роЪрпЖропрпНропро╡рпБроорпН')}
            </p>
            <p className="text-blue-100">
              {isRecording ? 
                (language === 'en' ? 'Speak clearly and tap the button when done!' :
                 language === 'hi' ? 'рд╕реНрдкрд╖реНрдЯ рдмреЛрд▓реЗрдВ рдФрд░ рдЬрдм рд╣реЛ рдЬрд╛рдП рддреЛ рдмрдЯрди рдЯреИрдк рдХрд░реЗрдВ!' :
                 language === 'mr' ? 'рд╕реНрдкрд╖реНрдЯ рдмреЛрд▓рд╛ рдЖрдгрд┐ рдЭрд╛рд▓реНрдпрд╛рд╡рд░ рдмрдЯрдг рдЯреЕрдк рдХрд░рд╛!' :
                 language === 'gu' ? 'рк╕рлНрккрк╖рлНркЯ ркмрлЛрк▓рлЛ ркЕркирлЗ ркеркИ ркЬрк╛ркп ркдрлНркпрк╛рк░рлЗ ркмркЯрки ркЯрлЗркк ркХрк░рлЛ!' :
                 'родрпЖро│ро┐ро╡ро╛роХ рокрпЗроЪрпБроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роорпБроЯро┐роирпНродродрпБроорпН рокрпКродрпНродро╛ройрпИ роЯрпЗрокрпН роЪрпЖропрпНропро╡рпБроорпН!') :
                (language === 'en' ? 'Click the microphone and ask me anything!' :
                 language === 'hi' ? 'рдорд╛рдЗрдХреНрд░реЛрдлреЛрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ рдФрд░ рдореБрдЭрд╕реЗ рдХреБрдЫ рднреА рдкреВрдЫреЗрдВ!' :
                 language === 'mr' ? 'рдорд╛рдпрдХреНрд░реЛрдлреЛрдирд╡рд░ рдХреНрд▓рд┐рдХ рдХрд░рд╛ рдЖрдгрд┐ рдорд▓рд╛ рдХрд╛рд╣реАрд╣реА рд╡рд┐рдЪрд╛рд░рд╛!' :
                 language === 'gu' ? 'ркорк╛ркЗркХрлНрк░рлЛрклрлЛрки рккрк░ ркХрлНрк▓рк┐ркХ ркХрк░рлЛ ркЕркирлЗ ркоркирлЗ ркХркВркИрккркг рккрлВркЫрлЛ!' :
                 'роорпИроХрпНро░рпЛроГрокрпЛройро┐ро▓рпН роХро┐ро│ро┐роХрпН роЪрпЖропрпНродрпБ роОройрпНройро┐роЯроорпН роОродрпИропрпБроорпН роХрпЗро│рпНро╡ро┐ роХрпЗро│рпБроЩрпНроХро│рпН!')}
            </p>
          </div>
        </div>
      </Card>

      {/* Smart Tips */}
      <SmartTips tip={currentTip} />

      {/* Emoji Reactions */}
      <EmojiReactions onReaction={(emoji) => setCurrentTip(`Thanks for the ${emoji}! How else can I help?`)} />
    </div>
  );
};